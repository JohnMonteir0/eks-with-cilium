name: "Terraform Infrastructure Change Management"

on:
  # PLAN with path filters
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
    paths:
      - "*.tf"
      - "terraform.tfvars"
      - "module-*/**"

  # APPLY on merge (no path filter ‚Üí always runs on merged PR)
  pull_request_target:
    branches: [ main ]
    types: [closed]

permissions:
  contents: read
  pull-requests: write

env:
  TF_LOG: INFO
  TF_LOG_PATH: tf.log
  TF_DDB_TABLE: ${{ vars.TF_DDB_TABLE }}

  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

# One run per PR or ref; apply cancels any in-flight plan for that PR
concurrency:
  group: tf-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  plan:
    if: github.event_name == 'pull_request'
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
      - name: Checkout (PR head)
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Configure AWS credentials
        run: echo "AWS credentials configured"

      - name: Terraform init
        id: init
        run: terraform init -reconfigure -upgrade

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -recursive

      - name: Terraform validate
        id: validate
        run: terraform validate

      # Fast plan (no lock) for PRs
      - name: Terraform plan (no lock)
        id: plan
        run: terraform plan -no-color -input=false -lock=false -refresh=false | tee tf-plan.out
        continue-on-error: true

      - name: Comment plan on PR
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let plan = '';
            try { plan = fs.readFileSync('tf-plan.out', 'utf8'); } catch (e) { plan = '(no plan output)'; }
            const out = `#### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ \`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`
            ${plan}
            \`\`\`

            </details>
            *Pushed by: @${{ github.actor }}, Event: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: out
            });

      - name: Fail if plan failed
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Upload Terraform logs (plan)
        if: failure() || cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-logs-plan
          path: |
            tf.log
            tf-plan.out

  apply:
    # Only on merged PR to main
    if: github.event_name == 'pull_request_target' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.base_ref == 'main'
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    environment:
      name: tf-apply                        # ‚Üê set required reviewers in repo Settings ‚Üí Environments
      url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
      - name: Checkout (merge commit)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Configure AWS credentials
        run: echo "AWS credentials configured"

      - name: Terraform init
        id: init
        run: terraform init -reconfigure -upgrade

      - name: Terraform apply (wait for lock)
        run: terraform apply -auto-approve -input=false -no-color -lock-timeout=20m | tee tf-apply.out

      # --- Diagnostics & Auto-unlock on failure/cancel ---
      - name: Upload Terraform logs (apply)
        if: failure() || cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-logs-apply
          path: |
            tf.log
            tf-apply.out

      - name: Force-unlock DynamoDB lock (best-effort)
        if: failure() || cancelled()
        run: |
          set -euo pipefail
          LOG="${TF_LOG_PATH:-tf.log}"
          LOCK_ID="$(grep -o 'tf_backend\.lock\.id=[a-f0-9-]\+' "$LOG" | tail -n1 | sed 's/.*=//')" || true
          echo "Last seen lock id: ${LOCK_ID:-<none>}"
          STATE_KEY="$(grep -o 'tf_backend\.s3\.path=[^ ]\+' "$LOG" | tail -n1 | sed 's/.*=//')" || true
          [ -z "${STATE_KEY:-}" ] && STATE_KEY="terraform.tfstate"
          echo "Inferred state key: ${STATE_KEY}"

          unlock_ok=false
          if [ -n "${LOCK_ID:-}" ]; then
            set +e
            OUT="$(terraform force-unlock -force "$LOCK_ID" 2>&1)"
            RC=$?
            set -e
            echo "$OUT"
            if [ $RC -eq 0 ] || echo "$OUT" | grep -qiE 'unexpected end of JSON input|already unlocked|NoSuchLock'; then
              echo "Treating unlock as successful."
              unlock_ok=true
            fi
          fi

          if [ "${unlock_ok}" != "true" ] && [ -n "${TF_DDB_TABLE:-}" ]; then
            echo "Attempting DynamoDB cleanup: table=${TF_DDB_TABLE} key=${STATE_KEY}"
            aws dynamodb delete-item --table-name "${TF_DDB_TABLE}" \
              --key "{\"LockID\":{\"S\":\"${STATE_KEY}\"}}" || true
          fi

          echo "Unlock cleanup complete (best-effort)."