name: "Terraform Infrastructure Change Management Pipeline with GitHub Actions"

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, closed]
    paths:
      - "*.tf"
      - "terraform.tfvars"
      - "module-*/**"

env:
  TF_LOG: INFO
  # AWS creds (replace with OIDC later if you want)
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  terraform:
    name: "Terraform Infrastructure Change Management"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
      # PLAN (PR open/sync/reopen)
      - name: Checkout (PR head)
        if: github.event.action != 'closed'
        uses: actions/checkout@v2

      # APPLY (on merge ‚Üí use the merge commit)
      - name: Checkout (merge commit)
        if: github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: echo "AWS credentials configured"

      - name: Terraform init
        id: init
        run: terraform init -reconfigure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform format
        id: fmt
        run: terraform fmt -recursive

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        if: github.event.action != 'closed'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event.action != 'closed'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event.action }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: github.event.action != 'closed' && steps.plan.outcome == 'failure'
        run: exit 1

      # Apply only when PR was merged into main
      - name: Terraform Apply
        if: github.event.action == 'closed' && github.event.pull_request.merged == true && github.base_ref == 'main'
        run: terraform apply -auto-approve -input=false
