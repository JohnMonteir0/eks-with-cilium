name: "Terraform Infrastructure Change Management"

on:
  # PLAN with path filters
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
    paths:
      - "*.tf"
      - "terraform.tfvars"
      - "module-*/**"

  # APPLY on merge (no path filter → always runs on merged PR)
  pull_request_target:
    branches: [ main ]
    types: [closed]

permissions:
  contents: read
  pull-requests: write

env:
  TF_LOG: INFO
  TF_LOG_PATH: tf.log                      # << write TF logs to a file
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

# One run per PR; apply cancels any in-flight plan for that PR
concurrency:
  group: tf-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  terraform:
    name: "Terraform Infrastructure Change Management"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
      # PLAN (PR head)
      - name: Checkout (PR head)
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v4

      # APPLY (merge commit)
      - name: Checkout (merge commit)
        if: github.event_name == 'pull_request_target' && github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: echo "AWS credentials configured"

      - name: Terraform init
        id: init
        run: terraform init -reconfigure -upgrade
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform format
        id: fmt
        run: terraform fmt -recursive

      - name: Terraform validate
        id: validate
        run: terraform validate

      # PLAN (wait for lock; capture output)
      - name: Terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false -lock-timeout=20m | tee tf-plan.out
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>
            *Pushed by: @${{ github.actor }}, Event: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: github.event_name == 'pull_request' && steps.plan.outcome == 'failure'
        run: exit 1

      # APPLY (also wait for lock; capture output)
      - name: Terraform Apply
        if: github.event_name == 'pull_request_target' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.base_ref == 'main'
        run: terraform apply -auto-approve -input=false -lock-timeout=20m -no-color | tee tf-apply.out

      # ---- Diagnostics & Auto-Unlock on failure/cancel ----

      - name: Upload Terraform logs
        if: failure() || cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-logs
          path: |
            tf.log
            tf-plan.out
            tf-apply.out

      - name: Force-unlock DynamoDB lock (best-effort)
        if: failure() || cancelled()
        run: |
          set -euo pipefail
          # Grab the last seen lock id from terraform log (INFO line contains tf_backend.lock.id=<uuid>)
          LOCK_ID="$(grep -o 'tf_backend\.lock\.id=[a-f0-9-]\+' "${TF_LOG_PATH:-tf.log}" | tail -n1 | sed 's/.*=//')"
          if [ -n "${LOCK_ID:-}" ]; then
            echo "Attempting terraform force-unlock with LOCK_ID=${LOCK_ID}"
            terraform force-unlock -force "$LOCK_ID" || true
          else
            echo "No lock id found in ${TF_LOG_PATH:-tf.log}; skipping force-unlock."
          fi
